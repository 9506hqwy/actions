name: Test
description: Run test and report coverages
inputs:
  output-dir:
    description: Directory to store coverage reports
    required: false
    default: artifacts
runs:
  using: composite
  steps:
    - name: Install Libraries
      run: |
        Write-Output "::group::uv sync"
        uv sync --group test
        Write-Output "::endgroup::"
      shell: pwsh

    - name: Run Tests
      run: |
        Write-Output "::group::uv run tox"
        uv run tox
        Write-Output "::endgroup::"
      shell: pwsh

    - name: Generate Coverage Summary Report
      run: |
        Write-Output "::group::uv run coverage report"
        uv run coverage report > "${env:OUTPUT_PATH}\Summary.txt"
        uv run coverage report --format=markdown > "${env:OUTPUT_PATH}\SummaryGithub.md"
        Write-Output "::endgroup::"

        Get-Content "${env:OUTPUT_PATH}\Summary.txt"
        Get-Content "${env:OUTPUT_PATH}\SummaryGithub.md" > "${env:GITHUB_STEP_SUMMARY}"
      shell: pwsh
      env:
        OUTPUT_PATH: ${{ github.workspace }}\${{ inputs.output-dir }}

    - name: Generate Coverage HTML Report
      id: html
      run: |
        Write-Output "::group::uv run coverage html"
        $OUTPUT_DIR = Join-Path -Path ([IO.Path]::GetTempPath()) -ChildPath (New-Guid)
        mkdir -p "${OUTPUT_DIR}"
        Write-Output "coverage_path=${OUTPUT_DIR}" >> "${env:GITHUB_OUTPUT}"

        uv run coverage html --directory="${OUTPUT_DIR}"
        Write-Output "::endgroup::"
      shell: pwsh

    - name: Archive Coverage HTML Report
      run: |
        Write-Output "::group::zip"
        Compress-Archive -Path '*' -DestinationPath "${env:DOC_FILE_PATH}"
        Write-Output "::endgroup::"
      shell: pwsh
      working-directory: ${{ steps.html.outputs.coverage_path }}
      env:
        DOC_FILE_PATH: ${{ github.workspace }}\${{ inputs.output-dir }}\coverage.zip
