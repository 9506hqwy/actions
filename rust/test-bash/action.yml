name: Test
description: Run test and report coverages
inputs:
  output-dir:
    description: Directory to store coverage reports
    required: false
    default: artifacts
runs:
  using: composite
  steps:
    - name: Run Tests
      run: |
        echo "::group::cargo test"
        cargo test --verbose
        echo "::endgroup::"
      shell: bash
      env:
        RUSTFLAGS: '-C instrument-coverage'
        LLVM_PROFILE_FILE: '${{ github.workspace }}/target/profiles/default_%m_%p.profraw'

    - name: Install LLVM
      run: |
        echo "::group::rustup component add"
        rustup component add llvm-tools
        echo "::endgroup::"
      shell: bash

    - name: Collect Coverage
      id: coverage
      run: |
        echo "::group::llvm-profdata"

        HOST_TUPLE="$(rustc --print host-tuple)"
        mapfile -t TEST_BIN < <(cargo test --no-run 2>&1 | grep Executable | cut -d '(' -f 2 | cut -d ')' -f 1)
        OBJECT_ARGS=$(printf '%s\n' "${TEST_BIN[@]}" | xargs -i echo --object={})

        profiles=$(find "${LLVM_PROFILE_PATH}" -name 'default_*.profraw')

        TEMP_PATH="$(rustc --print sysroot)/lib/rustlib/${HOST_TUPLE}/bin:$PATH"
        export PATH="${TEMP_PATH}"

        llvm-profdata merge \
            --sparse \
            --output="${LLVM_PROFILE_PATH}/default.profdata" \
            "${profiles[@]}"

        llvm-cov export \
            --ignore-filename-regex='library/std/src' \
            --ignore-filename-regex='cargo/registry/src' \
            "${OBJECT_ARGS[@]}" \
            --instr-profile="${LLVM_PROFILE_PATH}/default.profdata" \
            --format=lcov \
            > "${LLVM_PROFILE_PATH}/coverage.lcov"

        echo "coverage_bin=${LLVM_PROFILE_PATH}/coverage.lcov" >> "${GITHUB_OUTPUT}"

        echo "::endgroup::"
      shell: bash
      env:
        RUSTFLAGS: '-C instrument-coverage'
        LLVM_PROFILE_PATH: '${{ github.workspace }}/target/profiles'

    - name: Install ReportGenerator
      run: |
        echo "::group::dotnet tool install"
        dotnet tool install -g dotnet-reportgenerator-globaltool
        echo "::endgroup::"
      shell: bash

    - name: Generate Coverage Summary Report
      run: |
        echo "::group::reportgenerator summary"
        reportgenerator -reports:"${COVERAGE_BIN}" -targetdir:"${OUTPUT_PATH}" -reporttypes:"MarkdownSummaryGithub;TextSummary"
        echo "::endgroup::"

        cat "${OUTPUT_PATH}/Summary.txt"
        cat "${OUTPUT_PATH}/SummaryGithub.md" > "${GITHUB_STEP_SUMMARY}"
      shell: bash
      env:
        COVERAGE_BIN: ${{ steps.coverage.outputs.coverage_bin }}
        OUTPUT_PATH: ${{ github.workspace }}/${{ inputs.output-dir }}

    - name: Generate Coverage HTML Report
      id: html
      run: |
        echo "::group::reportgenerator html"
        OUTPUT_DIR=$(mktemp -d)
        echo "coverage_path=${OUTPUT_DIR}" >> "${GITHUB_OUTPUT}"

        reportgenerator -reports:"${COVERAGE_BIN}" -targetdir:"${OUTPUT_DIR}" -reporttypes:"Html"
        echo "::endgroup::"
      shell: bash
      env:
        COVERAGE_BIN: ${{ steps.coverage.outputs.coverage_bin }}

    - name: Archive Coverage HTML Report
      run: |
        echo "::group::tar"
        tar -zcf "${DOC_FILE_PATH}" -- *
        echo "::endgroup::"
      shell: bash
      working-directory: ${{ steps.html.outputs.coverage_path }}
      env:
        DOC_FILE_PATH: ${{ github.workspace }}/${{ inputs.output-dir }}/coverage.tar.gz
